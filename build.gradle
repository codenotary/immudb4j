import java.util.concurrent.TimeUnit

/*
Copyright 2022 CodeNotary, Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
    }
}

plugins {
    id 'java-library'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.10.2'
    id 'com.google.protobuf' version '0.8.18'
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'io.codenotary'
archivesBaseName = 'immudb4j'
version = '1.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def protocVersion = '3.19.4'
def grpcVersion = '1.44.1'

protobuf {
    protoc {
        // The version of protoc must match protobuf-java. If you don't depend on
        // protobuf-java directly, you will be transitively depending on the
        // protobuf-java version that grpc depends on.
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'annotate_code'
                }
            }
        }
        all()*.plugins {
            grpc {}
        }
    }

    generatedFilesBaseDir = "$projectDir/src/generated"
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}


sourceSets {

    main {
        java.srcDirs += ['src/generated/main/grpc/', 'src/generated/main/java/']
    }

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

}

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

    testImplementation 'org.testng:testng:6.14.3'
    
    implementation 'javax.annotation:javax.annotation-api:1.2-b01'
}

idea {
    module {
        sourceDirs += file("${projectDir}/src/generated/main/java")
        sourceDirs += file("${projectDir}/src/generated/main/grpc")
    }
}

test {
    useTestNG()
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
    // Run the unit tests sequentially.
    maxParallelForks = 1

    testLogging {
        events "FAILED"
    }
}

test.finalizedBy([jacocoTestReport])

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'io/codenotary/immudb/**')
        }))
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}


publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            credentials {
                username = project.findProperty("ossrhUsername") ?: System.getenv("MAVEN_USERNAME")
                password = project.findProperty("ossrhPassword") ?: System.getenv("MAVEN_PASSWORD")
            }
        }

        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/codenotary/immudb4j")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)

            pom {
                name = 'immudb4j'
                description = 'Java SDK for immudb'
                url = 'https://github.com/codenotary/immudb4j'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jeroiraz'
                        name = 'Jerónimo Irazábal'
                        email = 'jeronimo@codenotary.com'
                    }

                    developer {
                        id = 'giako'
                        name = 'Giacomo Russo'
                        email = 'giacomo@codenotary.com'
                    }

                    developer {
                        id = 'dxps'
                        name = 'Marius Ileana'
                        email = 'marius@codenotary.com'
                    }
                }
                scm {
                    url = 'https://github.com/codenotary/immudb4j'
                    connection = 'scm:https://github.com/codenotary/immudb4j.git'
                    developerConnection = 'scm:https://github.com/codenotary/immudb4j.git'
                }
            }
        }
    }

    signing {
        sign publishing.publications.gpr
    }
}